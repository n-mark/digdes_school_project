{
	"info": {
		"_postman_id": "39ed2fe3-9ccf-495d-b080-0ce19aa5b520",
		"name": "Employee controller testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "(Precondition) Authentication",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\" : \"root\",\n    \"password\" : \"root\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/auth/signin",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"auth",
						"signin"
					]
				}
			},
			"response": []
		},
		{
			"name": "1.1. Add employee",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function() {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"The response body is a JSON\", function() {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"",
							"pm.test(\"Fields of response JSON have proper values\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).not.to.be.null;",
							"    pm.expect(typeof jsonData.id).to.eql('number');",
							"    pm.expect(jsonData.lastName).to.eql(\"Иванов\");",
							"    pm.expect(jsonData.name).to.eql(\"Иван\");",
							"    pm.expect(jsonData.middleName).to.be.null;",
							"    pm.expect(jsonData.position).to.eql(\"JUNIOR\");",
							"    pm.expect(jsonData.jobTitle).to.eql(\"ACCOUNTANT\");",
							"    pm.expect(jsonData.account).to.be.null;",
							"    pm.expect(jsonData.email).to.be.null;",
							"",
							"    pm.collectionVariables.set('id', jsonData.id.toString());",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"lastName\": \"Иванов\",\n  \"name\": \"Иван\",\n  \"position\": \"JUNIOR\",\n  \"jobTitle\": \"ACCOUNTANT\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/employees",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "1.2. Update employee data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"The response body is a JSON\", function() {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"",
							"pm.test(\"The employee's 'position' field has changed\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.position).to.eql(\"CHIEF\");",
							"});",
							"",
							"pm.test(\"The 'middleName' field has been set\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.middleName).not.to.be.null;",
							"    pm.expect(jsonData.middleName).to.eql(\"Иванович\");",
							"});",
							"",
							"pm.test(\"The initial fields haven't changed after update\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.lastName).to.eql(\"Иванов\");",
							"    pm.expect(jsonData.name).to.eql(\"Иван\");",
							"    pm.expect(jsonData.jobTitle).to.eql(\"ACCOUNTANT\");",
							"    pm.expect(jsonData.account).to.be.null;",
							"    pm.expect(jsonData.email).to.be.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\"id\" : {{id}}, \n\"middleName\" : \"Иванович\", \n\"position\": \"CHIEF\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/employees",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "1.3. Search employees",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains previously added object\", function() {",
							"    var content = pm.response.json().content;",
							"",
							"    var expectedId = pm.collectionVariables.get(\"id\");",
							"",
							"    var idFound = false;",
							"",
							"    for (var i = 0; i < content.length; i++) {",
							"        var obj = content[i];",
							"        if (obj.id === parseInt(expectedId)) {",
							"            idFound = true;",
							"            break;",
							"        }",
							"    }",
							"",
							"    pm.expect(idFound).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/employees/search?searchString=ив",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"employees",
						"search"
					],
					"query": [
						{
							"key": "searchString",
							"value": "ив"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "1.4. Get employee by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Fields of response JSON have expected values\", function () {",
							"    var jsonData = pm.response.json();",
							"    var expectedId = pm.collectionVariables.get(\"id\");",
							"    pm.expect(jsonData.id).to.eql(+expectedId);",
							"    pm.expect(jsonData.lastName).to.eql(\"Иванов\");",
							"    pm.expect(jsonData.name).to.eql(\"Иван\");",
							"    pm.expect(jsonData.middleName).to.eql(\"Иванович\");",
							"    pm.expect(jsonData.position).to.eql(\"CHIEF\");",
							"    pm.expect(jsonData.jobTitle).to.eql(\"ACCOUNTANT\");",
							"    pm.expect(jsonData.account).to.be.null;",
							"    pm.expect(jsonData.email).to.be.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/employees/id/{{id}}",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"employees",
						"id",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "1.5. Get employee by account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Fields of response JSON have expected values\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).not.to.be.null;",
							"    pm.expect(typeof jsonData.id).to.eql('number');",
							"    pm.expect(jsonData.lastName).to.eql(\"root\");",
							"    pm.expect(jsonData.name).to.eql(\"root\");",
							"    pm.expect(jsonData.account).to.eql(\"root\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/employees/account/root",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"employees",
						"account",
						"root"
					]
				}
			},
			"response": []
		},
		{
			"name": "1.6 Set employee status to 'DELETE'",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body matches string\", function () {",
							"    var expectedId = pm.collectionVariables.get(\"id\");",
							"    pm.expect(pm.response.text()).to.include(\"The employee with id = \" + expectedId + \" status has been set to 'DELETED'\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:8080/employees?id={{id}}",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"employees"
					],
					"query": [
						{
							"key": "id",
							"value": "{{id}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": ""
		}
	]
}